<?php

// Examples of simple mathematical functions (Примеры простейших математических функций)
echo 1 + 2, PHP_EOL;  // (Выводит на экран консоли результат сложения двух чисел)
echo 1 * 3, PHP_EOL; // (Выводит на экран консоли результат умножения двух чисел)
echo 1 - 2, PHP_EOL;  // (Выводит на экран консоли результат вычитания одного числа из другого)
echo 1 / 2, PHP_EOL, PHP_EOL; // (Выводит на экран консоли результат деления одного числа на другое)

// (Пример использования простейших математических функций для вычисления нужной величины)
echo 543 * 0.2, PHP_EOL, PHP_EOL; // (Выводит на экран консоли результат вычисления 20% из 543)


// (Операция деления с остатком, которая возвращает в качестве результата - остаток)
// (В орифметике нахождение целочисленного остатка от деления называют - "взятием остатка")
// (Выполняется на основании равенства: "a = b * q + r" и условий его выполнения: "b /= 0"; "0 <= r < |b|")
// (Если "b > a", тогда "q = 0", а "r = a"; )
// ("a" - делимое; "b" - делитель; "q" - неполное частное; "r" - остаток)
// (Все ниже описаные строки кода с оператором функции нахождения целочисленного остатка "%" - выводят на экран натуральную величину остатка)
echo 3 % 2, PHP_EOL; // (3 = 2 * 1 + 1 - остаток = "1")
echo 7 % 2, PHP_EOL; // (7 = 2 * 3 + 1 - остаток = "1")
echo 3 % 5, PHP_EOL; // (3 = 5 * 0 + 3 - остаток = "3", т.к. если "b > a", тогда "q = 0", а "r = a")
echo 8 % 3, PHP_EOL; // (8 = 3 * 2 + 2 - остаток = "2")
echo 5 % 3, PHP_EOL; // (5 = 3 * 1 + 2 - остаток = "2")
echo 5 % -3, PHP_EOL; // (5 = (-3) * 1 + 2 - остаток = "2", т.к. знак остатка определяет "a", следовательно "-b = |b|")
echo -5 % 3, PHP_EOL; // (-5 = 3 * (-1) - 2 - остаток = "-2", т.к. знак остатка определяет "a", следовательно "r = (-1) * r")
echo -5 % -3, PHP_EOL; // (-5 = -3 * 1 - 2 - остаток = "-2")
echo 78 % 33, PHP_EOL; // (78 = 33 * 2 + 12 - остаток = "12")
echo 78 % 26, PHP_EOL, PHP_EOL; // (78 = 26 * 3 + 0 - остаток = "0", т.е. - деление выполняется нацело)


// Exponentiation (Возведение в степень)
// (Для выполнения операции возведения в степень используется набор служебных символов - "**")
echo 3 ** 2, PHP_EOL; // (Возведения числа "3" во "2-ю" степень)
echo 3 ** 5, PHP_EOL, PHP_EOL; // (Возведения числа "3" в "5-ю" степень)


// (Пример выполнения математических преобразований данных в переменной, с помощью упрощенного вида записи)
$result = 0;           // (Вводим переменную "$result" и задаем ей значение "0")
echo $result, PHP_EOL; // (Выводим начальное значение переменной "$result" на экран консоли)
$result += 7;          // (Добавляем к значению переменной "$result" число "7")
// (Запись "$result += 7;" является упрощенным аналогом записи "$result = $result + 7;")
echo $result, PHP_EOL; // (Выводим на экран текущее значение переменной "$result", после выполнения операции с ее значением: 0 + 7 = "7")
$result -= 2;          // (Вычетание из значения переменной "$result" (7) числа "2")
// (Запись "$result -= 2;" является упрощенным аналогом записи "$result = $result - 2;")
echo $result, PHP_EOL; // (Выводим на экран текущее значение переменной "$result", после выполнения операции с ее значением: 7 - 2 = "5")
$result *= 4;          // (Умножаем значение переменной "$result" (5) на "4")
// (Запись "$result *= 4;" является упрощенным аналогом записи "$result = $result * 4;")
echo $result, PHP_EOL; // (Выводим на экран текущее значение переменной "$result", после выполнения операции с ее значением: 5 * 4 = "20")
$result /= 10;          // (Делим значение переменной "$result" (20) на "10")
// (Запись "$result /= 10;" является упрощенным аналогом записи "$result = $result / 10;")
echo $result, PHP_EOL; // (Выводим на экран текущее значение переменной "$result", после выполнения операции с ее значением: 20 / 10 = "2")
$result **= 3;          // (Возводим значение переменной "$result" (2) в "3-ю" степень)
// (Запись "$result **= 3;" является упрощенным аналогом записи "$result = $result ** 3;")
echo $result, PHP_EOL; // (Выводим на экран текущее значение переменной "$result", после выполнения операции с ее значением: 20 / 10 = "2")
$result %= 3;          // (Производим операцию взятия остатка значения переменной "$result" (8) при ее делении на "3")
// (Запись "$result %= 3;" является упрощенным аналогом записи "$result = $result % 3;")
echo $result, PHP_EOL, PHP_EOL; // (Выводим на экран текущее значение переменной "$result", после выполнения операции с ее значением: 8 = 3 * 2 + 2 - остаток = "2")


// Increment (Инкремент)

// PostIncrement (ПостИнкремент)
$number = 5; // (Вводим переменную "$number" и задаем ей значение "5")
echo $number, PHP_EOL; // (Выводим на экран текущее значение переменной "$number")
$number++;   // (Добавляем к значению переменной "$number" (5) число "1")
// (Запись "$number++" является упрощенным аналогом записи "$number += 1;" или "$number = $number + 1;")
echo $number, PHP_EOL; // (Выводим на экран текущее значение переменной "$number", после выполнения операции с ее значением: 5 + 1 = "6")
$number++;   // (Добавляем к текущему значению переменной "$number" (6) число "1")
// (Запись "$number++" является упрощенным аналогом записи "$number += 1;" или "$number = $number + 1;")
echo $number, PHP_EOL; // (Выводим на экран текущее значение переменной "$number", после выполнения операции с ее значением: 6 + 1 = "7")
// (ПостИнкремент - это упращенный вариант записи матиматеческой операции увеличения на "1" текущего значения переменной, с помощью использования комбинации служебных символов "++")

// (Важной особенностью ПостИнкремента является то, что он выполняет соответствуещее преобразование для следующего (второго после первого объявления в одной строке кода) вывода информации о содержимом переменной)
echo 'PostIncrement: first => ', $number++, ' second => ', $number, PHP_EOL, PHP_EOL; // (Используем ПостИнкремент для увеличения значения переменной "$number" на единицу, в первом объявлении этой переменной, и одновременно с этим выводим на экран ту же переменныю второй раз)

// PreIncrement (ПреИнкремент)
++$number;   // (Добавляем к текущему значению переменной "$number" (8) число "1")
echo $number, PHP_EOL; // (Выводим на экран текущее значение переменной "$number", после выполнения операции с ее значением: 8 + 1 = "9")
// (Запись "++$number" является упрощенным аналогом записи "$number += 1;" или "$number = $number + 1;")
++$number;   // (Добавляем к текущему значению переменной "$number" (9) число "1")
echo $number, PHP_EOL; // (Выводим на экран текущее значение переменной "$number", после выполнения операции с ее значением: 9 + 1 = "10")
// (ПреИнкремент - это упрощенный вариант записи матиматеческой операции увеличения на "1" текущего значения переменной, с помощью использования комбинации служебных символов "++")

// (Важной особенностью ПреИнкремента является то, что он выполняет соответствуещее преобразование для того же вывода информации, а не как ПостИнкремент - для второго вывода значения соответствующей переменной)
echo 'PreIncrement: first => ', ++$number, ' second => ', $number, PHP_EOL, PHP_EOL; // (Используем ПостИнкремент для увеличения значения переменной "$number" на единицу, в первом объявлении этой переменной, и одновременно с этим выводим на экран ту же переменныю второй раз)

// (Пример задачки на сообразительность, которую могут спросить на собеседовании)
echo 'Test Result_1 => ',$number++ + ++$number, PHP_EOL, PHP_EOL; // (Вопрос - какое число будет выводимом на экран значении, при условии что в начале строки кода "$namber = 11")
// (Решение: "$number++" = 11; "++$number" = 13; => 11 + 13 = 24)


// Decrement (Декремент)

// PostDecrement (ПостДекремент)
$number2 = 5; // (Вводим переменную "$number" и задаем ей значение "5")
$number2--;   // (Отнимаем от текущего значения переменной "$number" (5) число "1")
// (Запись "$number2--" является упрощенным аналогом записи "$number2 -= 1;" или "$number2 = $number2 - 1;")
echo $number2, PHP_EOL; // (Выводим на экран текущее значение переменной "$number2", после выполнения операции с ее значением: 5 - 1 = "4")
$number2--;   // (Отнимаем от текущего значения переменной "$number2" (4) число "1")
// (Запись "$number--" является упрощенным аналогом записи "$number -= 1;" или "$number = $number - 1;")
echo $number2, PHP_EOL; // (Выводим на экран текущее значение переменной "$number2", после выполнения операции с ее значением: 4 - 1 = "3")
// (ПостДекремент - это упрощенный вариант записи матиматеческой операции уменьшения на "1" текущего значения переменной, с помощью использования комбинации служебных символов "--")

// (Важной особенностью ПостДекремента является то, что он выполняет соответствуещее преобразование для следующего (второго после первого объявления в одной строке кода) вывода информации о содержимом переменной)
echo 'PostDecrement: first => ', $number2--, ' second => ', $number2, PHP_EOL, PHP_EOL; // (Используем ПостДекремент для уменьшения значения переменной "$number2" на единицу, в первом объявлении этой переменной, и одновременно с этим выводим на экран ту же переменную второй раз)

// PreDecrement (ПреДекремент)
--$number2;   // (Отнимаем от текущего значению переменной "$number2" (2) число "1")
echo $number2, PHP_EOL; // (Выводим на экран текущее значение переменной "$number2", после выполнения операции с ее значением: 2 - 1 = "1")
// (Запись "--$number2" является упрощенным аналогом записи "$number2 -= 1;" или "$number2 = $number2 - 1;")
--$number2;   // (Отнимаем от текущего значения переменной "$number2" (1) число "1")
echo $number2, PHP_EOL; // (Выводим на экран текущее значение переменной "$number2", после выполнения операции с ее значением: 1 - 1 = "0")
// (ПреДекримент - это упрощенный вариант записи матиматеческой операции уменьшения на "1" текущего значения переменной, с помощью использования комбинации служебных символов "--")

// (Важной особенностью ПреДекркмента является то, что он выполняет соответствуещее преобразование для того же вывода информации, а не как ПостДекремент - для второго вывода значения соответствующей переменной)
echo 'PreDecrement: first => ', --$number2, ' second => ', $number2, PHP_EOL, PHP_EOL; // (Используем ПреДекремент для уменьшения значения переменной "$number2" на единицу, в первом объявлении этой переменной, и одновременно с этим выводим на экран ту же переменную второй раз)

// (Пример задачки на сообразительность, которую могут спросить на собеседовании)
echo 'Test Result_2 => ',$number2-- - --$number2, PHP_EOL, PHP_EOL; // (Вопрос - какое число будет в выводимом на экран значении, при условии что в начале строки кода "$namber2 = -1")
// (Решение: "$number2--" = -1; "--$number2" = -3; => (-1) - (-3) = (-1) + 3 = 2)
