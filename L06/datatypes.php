<?php

// Examples of different data types (Примеры разных типов данных)

// Basic data types (Основные типы данных)
$integer = 1; // (Присваиваем переменной "$integer" целочесленное значение - "1")
// (Целочисленные значения - "integer" (принятое сокрашение - int), которые записываются с помощью исключительно цыфр)

$float = 1.002; // (Присваиваем переменной "$float" десятичную дробь - "1.002")
// (Десятичные дроби - "float", которые записываются с помощью цифр и "плавающего" знака точки "." между ними)

$string = 'Техе'; // (Присваиваем переменной "$string" текстовую строку - "Text")
// (Строка - "string", котарая записывается с помощью последовательности любых символов, в том числе служебных - пробела, звездочки, точки с запятой и т.д.)

$bool = true; // (Присваиваем переменной "$bool" булевое значение - "true")
// (Булевое значение - "bool", которое может принимать только два типа значений: "true" = "1" и "false" = "0")

$array = [1, 1.002, 'Техе', true]; // (Присваиваем переменной "$array" массив с набором значений включающий в себя данные разных типов - "1, 1.002, 'Техе', true")
// (Масив - "array", тип данных который может содержать в себе набор разных типов данных, синтаксис которого состоит из квадратных скобок и набора значений записанных внутри них, в котором каждое отдельное значение отделено от остальных с помощью запятой)

$object = new stdClass(); // (Присваиваем переменной "$object" некий объект, который представляет собой самостоятельно созданный тип данных)
// (Объект - это некая смастаятельно созданая сущьность имеющая свои собственные самостоятельные свойства и правила взаимодействия с другими елементами кода)
// (С точки зрения анализа кода, объект - это область видимость в которой есть свой набор функций и свой набор переменных, которые доступны только внутри объекта и объект регулирует то, какие из переменных и функций доступны вне объекта)
// (Образно, объект - это своеобразный черный ящик или коробка с кодом, где все наполнение этой коробки описывается самостоятельно, в том числе, что будет делать эта коробка и как она будет взаимодействовать с другими коробками и элементами программного кода)

$null = null; // (Присваиваем переменной "$null" значение "пустоты" - "null")
// (Значение "пустоты" - "null", это тип данных который имеет одно значение "null", описувающий пустоту - "ничто", отсутствие чего либо. При этом, это - не "0", не "1", это полная пустота которая обозначает "ничто")
// (Обычно значение "пустоты" используется для настройки определенных переменных или параметров по умолчанию, в которых не известно какой тип данных будет использоваться)


// Pseudo data types (Псевдо-типы данных)
$file = fopen(__DIR__ . '/math.php', 'rb'); // (Присваиваем переменной "$file" значение ресурса, в котором в качестве ресурса выступает файл "math.php")
// (Данный код говорит о том, что мы открываем файл "math.php" и будем работать с ним как с потоком, отдельным ресурсом из которого будем считывать информацию)
// (Использование такого подхода позволит считывать информацию с соответствующего файла постепенно, например: построчно, побитово и т.п.)
fclose($file); // (Закрываем обращение к переменной "$file" как к ресурсу)
// (Тип данных ресурс - это регулируемая операция взаимодействия с каким либо потоком данных)

$callable = static function () {}; // (Присваиваем переменной "$callable" значение исполняемого типа данных в виде некой функции)
// (Исполняемый и вызываемый тип данных - "callable", обычно это какая то функция, с определенной логикой, которая обработает данные и выдаст своеобразный результат)


// Examples of performing data type conversion operations (Примеры выполнения операций преобразования типов данных)
// (Для выполнения операции преобразования одного типа данных в другой нужно перед переменной или данными записаными в коде вставить скобки и объявить в них нужный тип данных)

// (Преобразование натурального числа в строку)
echo 'Integer -> String', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump(224); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((string)224), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)

// (Преобразование строки в натуральное число при наличии в строке только цифр)
echo 'String (only numbers) -> Integer', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump('367'); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((int)'367'), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)

// (Преобразование строки в натуральное число при наличии в начале и конце строки с цифрами пробелов)
echo 'String (spaces at the beginning and end of a line) -> Integer', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump(' 835 '); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((int)' 835 '), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (В подобных случаях все лишние пробелы автоматически удаляются интерпретаторм из кода, а все присутствующие цифры преобразуются в число)

// (Преобразование строки в натуральное число при наличии в начале в строке между цифрами пробелов)
echo 'String (spaces between numbers) -> Integer', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump(' 9 6 7 '); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((int)' 9 6 7 '), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (В подобных случаях только первая цифра в строке преобразуются в число)

// (Преобразование строки в натуральное число при наличии в конце строки букв или служебных символов)
echo 'String (letters after numbers) -> Integer', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump('374sdfjg'); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((int)'374sdfjg'), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (В подобных случаях все символы которые не относятся к цифрам - не воспринимаются интерпретатором и удаляются)

// (Преобразование строки в натуральное число при наличии в начале строки букв или служебных символов)
echo 'String (letters before numbers) -> Integer', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump('ReF 328'); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((int)'ReF 328'), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (В подобных случаях процесс преобразования не проходит, а получаемое значение в результате = "0")

// (Преобразование десятичной дроби в строку)
echo 'Float -> String', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump(1.032); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((string)1.032), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)

// (Преобразование строки в десятичную дробь при наличие в строки цифр разделенных точкой)
echo 'String -> Float', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump('65.31'); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((float)'65.31'), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (Все выше описанные особенности преобразования строки в натуральное число таким же самым образом влияют на процес преобразования строки в десятичную дробь)

// (Преобразование натурального числа в десятичную дробь)
echo 'Integer -> Float', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump(33); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((float)33), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (Производится легко и без каких либо особенностей)

// (Преобразование десятичной дроби в нотуральное число)
echo 'Float -> Integer', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump(24.57); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((int)24.57), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (При подобном типе преобразования - все значения после разделительной точки (вместе с самой точкой) - не воспринимаются интерпретатором и удаляются)

// (Преобразование булевого значения в натуральное число)
echo 'Bool -> Integer', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump(true); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((int)true), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
echo 'Original data type and value: ',var_dump(false); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((int)false), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (В подобных случаях булево значение "true" - преобразовывается в "1", а "false" - в "0")

// (Преобразование натурального числа в булевое значение)
echo 'Integer -> Bool', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump(1); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((bool)1), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
echo 'Original data type and value: ',var_dump(0); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((bool)0), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
echo 'Original data type and value: ',var_dump(-1); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((bool)-1), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (В подобных случаях либое натуральное число кроме "0" получет булево значение - "true", а "0" - "false")

// (Преобразование десятичной дроби в булевое значение)
echo 'Float -> Bool', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump(0.324); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((bool)0.324), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
echo 'Original data type and value: ',var_dump(0); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((bool)0), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
echo 'Original data type and value: ',var_dump(-1.532); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((bool)-1.532), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (В подобных случаях либая десятичная дробь кроме "0" получет булево значение - "true", а "0" - "false")

// (Преобразование булевого значения в десятичную дробь)
echo 'Bool -> Float', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump(true); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((float)true), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
echo 'Original data type and value: ',var_dump(false); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((float)false), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (В подобных случаях булево значение "true" - преобразовывается в "1", а "false" - в "0")

// (Преобразование строки в булевое значение)
echo 'String -> Bool', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump(''); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((bool)''), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
echo 'Original data type and value: ',var_dump('Text'); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((bool)'Text'), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (В подобных случаях все строки которые содержат в себе хотябы один символ (в том числе и символ пробела) получают булево значение - "true", и тоько пустая строка без символов или строка в которой содержится число "0" - "false")

// (Преобразование массива в булевое значение)
echo 'Array -> Bool', PHP_EOL; // (Выводим на экран консоли информацию о типе операции преобразования)
echo 'Original data type and value: ',var_dump([]); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((bool)[]), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
echo 'Original data type and value: ',var_dump([4]); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Convert data type and value: ',var_dump((bool)[4]), PHP_EOL; // (Выводим на экран консоли преобразованный тип данных и его значение, после выполнения операции его преобразования)
// (В подобных случаях все массивы которые содержат в себе хотябы одно значение получают булево значение - "true", и тоько пустой массив, без каких либо значений - "false")

// (Более подробную информацию, с примерами преобразования одного типа данных в другой, можно найти на: https://www.php.net/manual/ru/language.types.type-juggling.php)


// Examples of performing data type checking operations (Примеры выполнения операций проверки типов данных)

// Checking if a value is an Integer (Проверка является ли значение натуральным числом)
// (Для выполнения операции проверки соответствующего типа данных используем функцию "is_int()", которую поместим в оператор "var_damp")
// (Особенностью подобного типа проверочной функции является то, что она в результати своей работы выдает булево значение, где в случае записи во внутренние скобки этой функции значения типа "integer" она выдаст - "true", а в остальных случаях - "false")
echo 'Checking -> Integer', PHP_EOL; // (Выводим на экран консоли информацию о типе проверки)
echo 'Original data type and value: ',var_dump(1); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_int(1)); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump(1.43); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_int(1.43)); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump('Text'); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_int('Text')); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump(false); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_int(false)); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump([]); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_int([])); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump(new stdClass()); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_int(new stdClass())); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump(null); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_int(null)), PHP_EOL; // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
// (Подобным же образом можно проверить и другие типы данных используя для них подобный тип проверочных функций: "is_float()" - для десятичных дробей; "is_string()" - для строк; "is_bool()" - для булевских значений; "is_null" - для значений пустоты; "is_array" - для массивов; "is_object" - для объектов)


// Check function for digits in data (Функция проверки на наличие цифр в данных)
// (Функция "is_numeric()" - позволяет определить наличие цифр в данных разных типов)
// (Особенностью подобного типа проверочной функции является то, что она в результати своей работы выдает булево значение, где в случае записи во внутренние скобки этой функции значения которое содержит в себе цыфры, она выдаст - "true", а в остальных случаях - "false")
echo 'Checking the presence of digits in the data', PHP_EOL; // (Выводим на экран консоли информацию о типе проверки)
echo 'Original data type and value: ',var_dump(1); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_numeric(1)); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump(1.064); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_numeric(1.064)); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump('534'); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_numeric('534')); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump('Text'); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_numeric('Text')); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump(null); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_numeric(null)); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump([1]); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_numeric([1])); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)
echo 'Original data type and value: ',var_dump(new stdClass()); // (Выводим на экран консоли исходный тип данных и его значение, перед его преобразованием)
echo 'Check result - if yes: true, if not: false -> ', var_dump(is_numeric(new stdClass())), PHP_EOL; // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да, а "false" - нет)


// (Функция проверки наличия переменной - "isset()")
// (Данную функцию удобно использовать для проверки наличия переменной, т.к. в случае отсутствия искомой переменной, т.е. - обращения к несуществующей переменной, не возникнет ошибки)
// (В результате своей работы данная функция как и предыдущие - выдает булево значение, где "true" - показывает наличие, а "false" - отсутствие искомой переменной в коде)
echo 'Checking for a variable in code', PHP_EOL; // (Выводим на экран консоли информацию о типе проверки)
echo 'Name verifiable - the missing variable in the code: ', '$w_38', PHP_EOL; // (Выводим на экран консоли в виде текстовой строки имя переменной проверяемой с помощью соответствующей функции)
echo 'Check result - if yes: true, if not: false -> ', var_dump(isset($w_38)); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да (присутствует), а "false" - нет (отсутствует))
echo 'Name verifiable - is present in the code variable: ', '$bool', PHP_EOL; // (Выводим на экран консоли в виде текстовой строки имя переменной проверяемой с помощью соответствующей функции)
echo 'Check result - if yes: true, if not: false -> ', var_dump(isset($bool)), PHP_EOL; // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да (присутствует), а "false" - нет (отсутствует))
// (Обычно данную функцию используют, в первую очередь, для проверки наличия определенного ключа в масиве)

// (Еще одной особенностью данной функции является то, что при проверке с ее помощью наличия в коде переменной которая содержит в себе дефолтное значение "null" - будет неготивный ответ, т.е. - "false")
echo 'The reaction of the function to a variable present in the code with the value "null": ', '$null', PHP_EOL; // (Выводим на экран консоли в виде текстовой строки имя переменной проверяемой с помощью соответствующей функции)
echo 'Check result - if yes: true, if not: false -> ', var_dump(isset($null)), PHP_EOL; // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да (присутствует), а "false" - нет (отсутствует))


// The function of checking data for the presence of emptiness - the absence of something (Функция проверки данных на наличие пустоты - отсутствия чего либо)
echo 'Checking data for presence of voids', PHP_EOL; // (Выводим на экран консоли информацию о типе проверки)
echo 'Data checked for emptiness: ', 'Type -> null', PHP_EOL; // (Выводим на экран консоли в виде текстовой строки имя переменной проверяемой с помощью соответствующей функции)
echo 'Check result - if yes: true, if not: false -> ', var_dump(empty(null)); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да (присутствует пустота), а "false" - нет (отсутствует пустота))
echo 'Data checked for emptiness: ', 'Numeral -> 0', PHP_EOL; // (Выводим на экран консоли в виде текстовой строки имя переменной проверяемой с помощью соответствующей функции)
echo 'Check result - if yes: true, if not: false -> ', var_dump(empty(0)); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да (присутствует пустота), а "false" - нет (отсутствует пустота))
echo 'Data checked for emptiness: ', 'Bool -> false', PHP_EOL; // (Выводим на экран консоли в виде текстовой строки имя переменной проверяемой с помощью соответствующей функции)
echo 'Check result - if yes: true, if not: false -> ', var_dump(empty(false)); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да (присутствует пустота), а "false" - нет (отсутствует пустота))
echo 'Data checked for emptiness: ', 'String -> Text', PHP_EOL; // (Выводим на экран консоли в виде текстовой строки имя переменной проверяемой с помощью соответствующей функции)
echo 'Check result - if yes: true, if not: false -> ', var_dump(empty('Text')); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да (присутствует пустота), а "false" - нет (отсутствует пустота))
echo 'Data checked for emptiness: ', 'Array -> [1]', PHP_EOL; // (Выводим на экран консоли в виде текстовой строки имя переменной проверяемой с помощью соответствующей функции)
echo 'Check result - if yes: true, if not: false -> ', var_dump(empty([1])); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да (присутствует пустота), а "false" - нет (отсутствует пустота))
echo 'Data checked for emptiness: ', 'Integer or Float < 0 > -> -1', PHP_EOL; // (Выводим на экран консоли в виде текстовой строки имя переменной проверяемой с помощью соответствующей функции)
echo 'Check result - if yes: true, if not: false -> ', var_dump(empty(-1)); // (Выводим на экран консоли результат проверки в виде булевого значения, где "true" является ответом - да (присутствует пустота), а "false" - нет (отсутствует пустота))


// (Универсальной "дебаг" функцией проверки типа и наличия каких либо данных является - функция "var_damp()" - которая указывает и тип данных, и сами данные)

